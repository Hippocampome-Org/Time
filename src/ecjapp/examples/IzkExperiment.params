parent.0 =                              @ec.simple.SimpleEvolutionState simple.params

# Modifications to the Simple EA boiler plate
# =========================
eval =					ecjapp.eval.SimpleGroupedEvaluator
# How mean times we should evaluate the fitness.  Set it > 1 if the simulation results are noisy.
eval.num-tests =                        15
eval.merge =                            mean
generations =				100
pop.subpop.0.size =			50


# Set up our evolutionary algorithm
# =========================

pop.subpop.0.species =                  ec.vector.FloatVectorSpecies
pop.subpop.0.species.pipe =             ec.vector.breed.VectorMutationPipeline 
pop.subpop.0.species.pipe.likelihood =  1.0
pop.subpop.0.species.pipe.source.0 =    ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.likelihood	= 0.9
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = same 
select.tournament.size =                2

pop.subpop.0.species.ind =              ec.vector.DoubleVectorIndividual
pop.subpop.0.species.fitness =          ec.simple.SimpleFitness
# The genome size needs to be x^2 + x, where x is the arity of the Boolean function we're trying to solve (see eval.problem.simulationCommandArguments)
pop.subpop.0.species.genome-size =      6

pop.subpop.0.species.min-gene =         -3.0
pop.subpop.0.species.max-gene =         3.0
pop.subpop.0.species.mutation-type =    gauss
pop.subpop.0.species.mutation-stdev =   0.5
pop.subpop.0.species.mutation-bounded = true
pop.subpop.0.species.mutation-prob =    0.03

#pop.subpop.0.species.crossover-likelihood =0.9
#pop.subpop.0.species.crossover-prob=   0.9
pop.subpop.0.species.crossover-type =   two 


# Set up external fitness evaluation
# =========================

eval.problem =                          ecjapp.eval.problem.CommandProblem
eval.problem.objective =                ecjapp.eval.problem.objective.StringToDoubleObjective
eval.problem.objective.idealFitnessValue = 1.0
eval.problem.simulationCommand =        $src/CARLsim-app/Examples/IzkExample
# This argument specifies the arity of the Boolean function IzkExample will try and solve.  2 is easy, >3 is hard.
eval.problem.simulationCommandArguments = 2 0
